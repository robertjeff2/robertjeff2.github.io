<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jeff</title>
  
  <subtitle>Jeffの记事本</subtitle>
  <link href="https://robertjeff2.github.io/atom.xml" rel="self"/>
  
  <link href="https://robertjeff2.github.io/"/>
  <updated>2021-10-21T13:33:13.098Z</updated>
  <id>https://robertjeff2.github.io/</id>
  
  <author>
    <name>Jeff</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>计网之TCP与UDP</title>
    <link href="https://robertjeff2.github.io/posts/27732848.html"/>
    <id>https://robertjeff2.github.io/posts/27732848.html</id>
    <published>2021-10-21T11:36:12.000Z</published>
    <updated>2021-10-21T13:33:13.098Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>[toc]</p><h1 id="TCP与UDP专题"><a href="#TCP与UDP专题" class="headerlink" title="TCP与UDP专题"></a>TCP与UDP专题</h1><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><h3 id="1-1-计算机网络协议模型"><a href="#1-1-计算机网络协议模型" class="headerlink" title="1.1 计算机网络协议模型"></a>1.1 计算机网络协议模型</h3><p><img src="https://gitee.com/robertjeff/imagebed/raw/master/images/202110211939293.png" alt="四层与七层网络协议"></p><p>其中TCP、UDP位于TCP/IP协议中的<code>传输层</code>：</p><p>传输层的主要任务是为两台主机进程之间的通信提供服务，处理数据包错误、数据包次序，以及其他一些关键传输问题</p><p>传输层向高层屏蔽了下层数据通信的细节。因此，它是计算机通信体系结构中关键的一层。</p><h2 id="二、概念"><a href="#二、概念" class="headerlink" title="二、概念"></a>二、概念</h2><h3 id="2-1-UDP"><a href="#2-1-UDP" class="headerlink" title="2.1 UDP"></a>2.1 UDP</h3><p>UDP（User Datagram Protocol），用户数据包协议，是一个简单的<strong>面向数据报的通信协议</strong>，即对应用层交下来的报文，不合并，不拆分，只是在其上面加上首部后就交给了下面的网络层</p><p>也就是说无论应用层交给<code>UDP</code>多长的报文，它统统发送，一次发送一个报文</p><p>而对接收方，接到后直接去除首部，交给上面的应用层就完成任务</p><p><code>UDP</code>报头包括4个字段，每个字段占用2个字节（即16个二进制位），标题短，开销小</p><p><img src="https://gitee.com/robertjeff/imagebed/raw/master/images/202110211950752.png" alt="UDP报文"></p><p>特点如下：</p><ul><li>UDP 不提供复杂的控制机制，利用 IP 提供面向无连接的通信服务</li><li>传输途中出现丢包，UDP 也不负责重发</li><li>当包的到达顺序出现乱序时，UDP没有纠正的功能。</li><li>并且它是将应用程序发来的数据在收到的那一刻，立即按照原样发送到网络上的一种机制。即使是出现网络拥堵的情况，UDP 也无法进行流量控制等避免网络拥塞行为</li></ul><h3 id="2-2-TCP"><a href="#2-2-TCP" class="headerlink" title="2.2 TCP"></a>2.2 TCP</h3><p>TCP（Transmission Control Protocol），传输控制协议，是一种可靠、<strong>面向字节流的通信协议</strong>，把上面应用层交下来的数据看成无结构的字节流来发送</p><p>可以想象成流水形式的，发送方TCP会将数据放入“蓄水池”（缓存区），等到可以发送的时候就发送，不能发送就等着，TCP会根据当前网络的拥塞状态来确定每个报文段的大小</p><p><code>TCP</code>报文首部有20个字节，额外开销大</p><p><img src="https://gitee.com/robertjeff/imagebed/raw/master/images/202110211952277.png" alt="TCP报文"></p><p>特点如下：</p><ul><li>TCP充分地实现了数据传输时各种控制功能，可以进行丢包时的重发控制，还可以对次序乱掉的分包进行顺序控制。而这些在 UDP 中都没有。</li><li>此外，TCP 作为一种面向有连接的协议，只有在确认通信对端存在时才会发送数据，从而可以控制通信流量的浪费。</li><li>根据 TCP 的这些机制，在 IP 这种无连接的网络上也能够实现高可靠性的通信（ 主要通过检验和、序列号、确认应答、重发控制、连接管理以及窗口控制等机制实现）</li></ul><h2 id="三、二者区别"><a href="#三、二者区别" class="headerlink" title="三、二者区别"></a>三、二者区别</h2><p>两者区别如下表所示：</p><table><thead><tr><th></th><th>TCP</th><th>UDP</th></tr></thead><tbody><tr><td>可靠性</td><td>可靠</td><td>不可靠</td></tr><tr><td>连接性</td><td>面向连接</td><td>无连接</td></tr><tr><td>报文</td><td>面向字节流</td><td>面向报文</td></tr><tr><td>效率</td><td>传输效率低</td><td>传输效率高</td></tr><tr><td>双共性</td><td>全双工</td><td>一对一、一对多、多对一、多对多</td></tr><tr><td>流量控制</td><td>滑动窗口</td><td>无</td></tr><tr><td>拥塞控制</td><td>慢开始、拥塞避免、快重传、快恢复</td><td>无</td></tr><tr><td>传输效率</td><td>慢</td><td>快</td></tr></tbody></table><ul><li>TCP 是面向连接的协议，建立连接3次握手、断开连接四次挥手，UDP是面向无连接，数据传输前后不连接连接，发送端只负责将数据发送到网络，接收端从消息队列读取</li><li>TCP 提供可靠的服务，传输过程采用流量控制、编号与确认、计时器等手段确保数据无差错，不丢失。UDP 则尽可能传递数据，但不保证传递交付给对方</li><li>TCP 面向字节流，将应用层报文看成一串无结构的字节流，分解为多个TCP报文段传输后，在目的站重新装配。UDP协议面向报文，不拆分应用层报文，只保留报文边界，一次发送一个报文，接收方去除报文首部后，原封不动将报文交给上层应用</li><li>TCP 只能点对点全双工通信。UDP 支持一对一、一对多、多对一和多对多的交互通信</li></ul><p>两者应用场景如下图：</p><p><img src="https://gitee.com/robertjeff/imagebed/raw/master/images/202110211954693.png" alt="应用场景"></p><p><strong>TCP应用场景：</strong> 效率要求相对低，但对准确性要求相对高的场景。因为传输中需要对数据确认、重发、排序等操作，相比之下效率没有UDP高。例如：文件传输（准确高要求高、但是速度可以相对慢）、接受邮件、远程登录。</p><p><strong>UDP应用场景：</strong> 效率要求相对高，对准确性要求相对低的场景。例如：QQ聊天、在线视频、网络语音电话（即时通讯，速度要求高，但是出现偶尔断续不是太大问题，并且此处完全不可以使用重发机制）、广播通信（广播、多播）。</p><h2 id="四、TCP三次握手与四次挥手"><a href="#四、TCP三次握手与四次挥手" class="headerlink" title="四、TCP三次握手与四次挥手"></a>四、TCP三次握手与四次挥手</h2><h3 id="4-1-三次握手"><a href="#4-1-三次握手" class="headerlink" title="4.1 三次握手"></a>4.1 三次握手</h3><p><img src="https://gitee.com/robertjeff/imagebed/raw/master/images/202110212024357.webp" alt="用三报文握手建立TCP连接"></p><p>三次握手（Three-way Handshake）其实就是指建立一个TCP连接时，需要客户端和服务器总共发送3个包。进行三次握手的主要作用就是为了确认双方的接收能力和发送能力是否正常、指定自己的初始化序列号为后面的可靠性传送做准备。实质上其实就是连接服务器指定端口，建立TCP连接，并同步连接双方的序列号和确认号，交换TCP窗口大小信息。</p><p>过程如下：</p><ul><li>第一次握手：客户端给服务端发一个 SYN 报文，并指明客户端的初始化序列号 ISN(c)，此时客户端处于 SYN_SENT 状态</li><li>第二次握手：服务器收到客户端的 SYN 报文之后，会以自己的 SYN 报文作为应答，为了确认客户端的 SYN，将客户端的 ISN+1作为ACK的值，此时服务器处于 SYN_RCVD 的状态</li><li>第三次握手：客户端收到 SYN 报文之后，会发送一个 ACK 报文，值为服务器的ISN+1。此时客户端处于 ESTABLISHED 状态。服务器收到 ACK 报文之后，也处于 ESTABLISHED 状态，此时，双方已建立起了连接。</li></ul><p>上述每一次握手的作用如下：</p><ul><li>第一次握手：客户端发送网络包，服务端收到了 这样服务端就能得出结论：客户端的发送能力、服务端的接收能力是正常的。</li><li>第二次握手：服务端发包，客户端收到了 这样客户端就能得出结论：服务端的接收、发送能力，客户端的接收、发送能力是正常的。不过此时服务器并不能确认客户端的接收能力是否正常</li><li>第三次握手：客户端发包，服务端收到了。 这样服务端就能得出结论：客户端的接收、发送能力正常，服务器自己的发送、接收能力也正常</li></ul><p>通过三次握手，就能确定双方的接收和发送能力是正常的。之后就可以正常通信了</p><h5 id="为什么要三次握手呢？两次不行吗？"><a href="#为什么要三次握手呢？两次不行吗？" class="headerlink" title="为什么要三次握手呢？两次不行吗？"></a><strong>为什么要三次握手呢？两次不行吗？</strong></h5><ul><li><p>为了确认双方的接收能力和发送能力都正常</p></li><li><p>如果是两次握手，发送端可以确定自己发送的信息能对方能收到，也能确定对方发的包自己能收到，但接收端只能确定对方发的包自己能收到 无法确定自己发的包对方能收到</p></li><li><p>并且两次握手的话, 客户端有可能因为网络阻塞等原因会发送多个请求报文，延时到达的请求又会与服务器建立连接，浪费掉许多服务器的资源</p></li></ul><h3 id="4-2-四次挥手"><a href="#4-2-四次挥手" class="headerlink" title="4.2 四次挥手"></a>4.2 四次挥手</h3><p><code>tcp</code>终止一个连接，需要经过四次挥手</p><p><img src="https://gitee.com/robertjeff/imagebed/raw/master/images/202110212035432.webp" alt="四次挥手"></p><p>过程如下：</p><ul><li>第一次挥手：客户端发送一个 FIN 报文，报文中会指定一个序列号。此时客户端处于 FIN_WAIT1 状态，停止发送数据，等待服务端的确认</li><li>第二次挥手：服务端收到 FIN 之后，会发送 ACK 报文，且把客户端的序列号值 +1 作为 ACK 报文的序列号值，表明已经收到客户端的报文了，此时服务端处于 CLOSE_WAIT状态</li><li>第三次挥手：如果服务端也想断开连接了，和客户端的第一次挥手一样，发给 FIN 报文，且指定一个序列号。此时服务端处于 <code>LAST_ACK</code> 的状态</li><li>第四次挥手：客户端收到 FIN 之后，一样发送一个 ACK 报文作为应答，且把服务端的序列号值 +1 作为自己 ACK 报文的序列号值，此时客户端处于 TIME_WAIT状态。需要过一阵子以确保服务端收到自己的 ACK 报文之后才会进入 CLOSED 状态，服务端收到 ACK 报文之后，就处于关闭连接了，处于 CLOSED 状态</li></ul><h5 id="那为什么需要四次挥手呢？"><a href="#那为什么需要四次挥手呢？" class="headerlink" title="那为什么需要四次挥手呢？"></a><strong>那为什么需要四次挥手呢？</strong></h5><p>服务端在收到客户端断开连接<code>Fin</code>报文后，并不会立即关闭连接，而是先发送一个<code>ACK</code>包先告诉客户端收到关闭连接的请求，只有当服务器的所有报文发送完毕之后，才发送<code>FIN</code>报文断开连接，因此需要四次挥手。</p><h5 id="等待2MSL的意义，如果不等待会怎样？"><a href="#等待2MSL的意义，如果不等待会怎样？" class="headerlink" title="等待2MSL的意义，如果不等待会怎样？"></a><strong>等待2MSL的意义</strong>，如果不等待会怎样？</h5><p>如果不等待，客户端直接跑路，当服务端还有很多数据包要给客户端发，且还在路上的时候，若客户端的端口此时刚好被新的应用占用，那么就接收到了无用数据包，造成数据包混乱。所以，最保险的做法是等服务器发来的数据包都死翘翘再启动新的应用。</p><p>那，照这样说一个 MSL 不就不够了吗，为什么要等待 2 MSL?</p><ul><li>1 个 MSL 确保四次挥手中主动关闭方最后的 ACK 报文最终能达到对端</li><li>1 个 MSL 确保对端没有收到 ACK 重传的 FIN 报文可以到达</li></ul><p>这就是等待 2MSL 的意义。</p><h5 id="2MSL是多久？"><a href="#2MSL是多久？" class="headerlink" title="2MSL是多久？"></a>2MSL是多久？</h5><p>规范里2MSL是四分钟。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="计算机网络" scheme="https://robertjeff2.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>CSS之两栏三栏布局</title>
    <link href="https://robertjeff2.github.io/posts/bfdfcbd4.html"/>
    <id>https://robertjeff2.github.io/posts/bfdfcbd4.html</id>
    <published>2021-10-20T09:39:30.000Z</published>
    <updated>2021-10-20T11:27:22.060Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="两栏、三栏布局"><a href="#两栏、三栏布局" class="headerlink" title="两栏、三栏布局"></a>两栏、三栏布局</h1><h2 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h2><h3 id="两栏布局"><a href="#两栏布局" class="headerlink" title="两栏布局"></a>两栏布局</h3><p>两栏布局实现效果就是将页面分割成左右宽度不等的两列，宽度较小的列设置为固定宽度，剩余宽度由另一列撑满，</p><p>比如 <code>Ant Design</code> 文档，蓝色区域为主要内容布局容器，侧边栏为次要内容布局容器</p><p><strong>这里称宽度较小的列父元素为次要布局容器，宽度较大的列父元素为主要布局容器</strong></p><p><img src="https://gitee.com/robertjeff/imagebed/raw/master/images/202110201747792.png" alt="Ant Design"></p><p>这种布局适用于内容上具有明显主次关系的网页</p><h3 id="三栏布局"><a href="#三栏布局" class="headerlink" title="三栏布局"></a>三栏布局</h3><p>三栏布局按照左中右的顺序进行排列，通常中间列最宽，左右两列次之</p><p>最常见的就是<code>github</code>：</p><p><img src="https://gitee.com/robertjeff/imagebed/raw/master/images/202110201748297.png" alt="github"></p><h2 id="二、两栏布局"><a href="#二、两栏布局" class="headerlink" title="二、两栏布局"></a>二、两栏布局</h2><p>双栏布局非常常见，往往是以一个定宽栏和一个自适应的栏并排展示存在</p><p>实现思路也非常的简单：</p><h4 id="浮动实现"><a href="#浮动实现" class="headerlink" title="浮动实现"></a>浮动实现</h4><ul><li>使用 float 左浮左边栏</li><li>右边模块使用 margin-left 撑出内容块做内容展示</li><li>为父级元素添加BFC，防止下方元素飞到上方内容</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;style&gt;    .box</span><span class="token punctuation">{</span>        <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span> &lt;!-- 生成BFC，计算高度时考虑浮动的元素 --&gt;    <span class="token punctuation">}</span>    <span class="token selector">.left</span> <span class="token punctuation">{</span>        <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">.right</span> <span class="token punctuation">{</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span> 210px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> lightgray<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>&lt;/style&gt;&lt;div class=<span class="token string">"box"</span>&gt;    &lt;div class=<span class="token string">"left"</span>&gt;左边&lt;/div&gt;    &lt;div class=<span class="token string">"right"</span>&gt;右边&lt;/div&gt;&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="flex弹性布局"><a href="#flex弹性布局" class="headerlink" title="flex弹性布局"></a>flex弹性布局</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;style&gt;    .box</span><span class="token punctuation">{</span>        <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">.left</span> <span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">.right</span> <span class="token punctuation">{</span>        <span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>    <span class="token punctuation">}</span>&lt;/style&gt;&lt;div class=<span class="token string">"box"</span>&gt;    &lt;div class=<span class="token string">"left"</span>&gt;左边&lt;/div&gt;    &lt;div class=<span class="token string">"right"</span>&gt;右边&lt;/div&gt;&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>flex</code>可以说是最好的方案了，代码少，使用简单</p><p>注意的是，<code>flex</code>容器的一个默认属性值:<code>align-items: stretch;</code></p><p>这个属性导致了列等高的效果。 为了让两个盒子高度自动，需要设置: <code>align-items: flex-start</code></p><h2 id="三、三栏布局"><a href="#三、三栏布局" class="headerlink" title="三、三栏布局"></a>三、三栏布局</h2><p>实现三栏布局中间自适应的布局方式有：</p><ul><li>两边使用 float，中间使用 margin</li><li>两边使用 absolute，中间使用 margin</li><li>display: table 实</li><li>flex实现</li><li>grid网格布局</li></ul><h3 id="两边使用-float，中间使用-margin"><a href="#两边使用-float，中间使用-margin" class="headerlink" title="两边使用 float，中间使用 margin"></a>两边使用 float，中间使用 margin</h3><p>需要将中间的内容放在<code>html</code>结构最后，否则右侧会臣在中间内容的下方</p><p>实现代码如下：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;style&gt;    .wrap</span> <span class="token punctuation">{</span>        <span class="token property">background</span><span class="token punctuation">:</span> #eee<span class="token punctuation">;</span>        <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span> &lt;!-- 生成BFC，计算高度时考虑浮动的元素 --&gt;        <span class="token property">padding</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">.left</span> <span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> coral<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">.right</span> <span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> 120px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> lightblue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">.middle</span> <span class="token punctuation">{</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span> 220px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> lightpink<span class="token punctuation">;</span>        <span class="token property">margin-right</span><span class="token punctuation">:</span> 140px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>&lt;/style&gt;&lt;div class=<span class="token string">"wrap"</span>&gt;    &lt;div class=<span class="token string">"left"</span>&gt;左侧&lt;/div&gt;    &lt;div class=<span class="token string">"right"</span>&gt;右侧&lt;/div&gt;    &lt;div class=<span class="token string">"middle"</span>&gt;中间&lt;/div&gt;&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原理如下：</p><ul><li>两边固定宽度，中间宽度自适应。</li><li>利用中间元素的margin值控制两边的间距</li><li>宽度小于左右部分宽度之和时，右侧部分会被挤下去</li></ul><p>这种实现方式存在缺陷：</p><ul><li>主体内容是最后加载的。</li><li>右边在主体内容之前，如果是响应式设计，不能简单的换行展示</li></ul><h3 id="两边使用-absolute，中间使用-margin"><a href="#两边使用-absolute，中间使用-margin" class="headerlink" title="两边使用 absolute，中间使用 margin"></a>两边使用 absolute，中间使用 margin</h3><p>基于绝对定位的三栏布局：注意绝对定位的元素脱离文档流，相对于最近的已经定位的祖先元素进行定位。无需考虑HTML中结构的顺序</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;style&gt;  .container</span> <span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token selector">.left,  .right,  .main</span> <span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.left</span> <span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.right</span> <span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.main</span> <span class="token punctuation">{</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0 110px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>  <span class="token punctuation">}</span>&lt;/style&gt;&lt;div class=<span class="token string">"container"</span>&gt;  &lt;div class=<span class="token string">"left"</span>&gt;左边固定宽度&lt;/div&gt;  &lt;div class=<span class="token string">"right"</span>&gt;右边固定宽度&lt;/div&gt;  &lt;div class=<span class="token string">"main"</span>&gt;中间自适应&lt;/div&gt;&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现流程：</p><ul><li>左右两边使用绝对定位，固定在两侧。</li><li>中间占满一行，但通过 margin和左右两边留出10px的间隔</li></ul><h3 id="使用-display-table-实现"><a href="#使用-display-table-实现" class="headerlink" title="使用 display: table 实现"></a>使用 display: table 实现</h3><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;style&gt;  .container</span> <span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span>    <span class="token property">table-layout</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.left,  .right,  .main</span> <span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> table-cell<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.left,  .right</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.main</span> <span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token punctuation">}</span>&lt;/style&gt;&lt;div class=<span class="token string">"container"</span>&gt;  &lt;div class=<span class="token string">"left"</span>&gt;左边固定宽度&lt;/div&gt;  &lt;div class=<span class="token string">"main"</span>&gt;中间自适应&lt;/div&gt;  &lt;div class=<span class="token string">"right"</span>&gt;右边固定宽度&lt;/div&gt;&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现原理：</p><ul><li>外层通过 <code>display: table</code>设置为表格，设置 <code>table-layout: fixed</code>表示列宽自身宽度决定，而不是自动计算。</li><li>内层的左中右通过 display: table-cell设置为表格单元。</li><li>左右设置固定宽度，中间设置 width: 100% 填充剩下的宽度</li></ul><h3 id="使用flex实现"><a href="#使用flex实现" class="headerlink" title="使用flex实现"></a>使用flex实现</h3><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;style type="text/css"&gt;    .wrap</span> <span class="token punctuation">{</span>        <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>        <span class="token property">justify-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span>&lt;--定义了子元素在主轴<span class="token punctuation">(</span>横轴<span class="token punctuation">)</span>上的对齐方式    <span class="token punctuation">}</span>    <span class="token selector">.left,    .right,    .middle</span> <span class="token punctuation">{</span>        <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">.left</span> <span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> coral<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">.right</span> <span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> 120px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> lightblue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">.middle</span> <span class="token punctuation">{</span>        <span class="token property">background</span><span class="token punctuation">:</span> #555<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> 0 20px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>&lt;/style&gt;&lt;div class=<span class="token string">"wrap"</span>&gt;    &lt;div class=<span class="token string">"left"</span>&gt;左侧&lt;/div&gt;    &lt;div class=<span class="token string">"middle"</span>&gt;中间&lt;/div&gt;    &lt;div class=<span class="token string">"right"</span>&gt;右侧&lt;/div&gt;&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现过程：</p><ul><li>仅需将容器设置为<code>display:flex;</code>，</li><li>盒内元素两端对其，将中间元素设置为<code>100%</code>宽度，或者设为<code>flex:1</code>，即可填充空白</li><li>盒内元素的高度撑开容器的高度</li></ul><p>优点：</p><ul><li>结构简单直观</li><li>可以结合 flex的其他功能实现更多效果，例如使用 order属性调整显示顺序，让主体内容优先加载，但展示在中间</li></ul><h3 id="grid网格布局"><a href="#grid网格布局" class="headerlink" title="grid网格布局"></a>grid网格布局</h3><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;style&gt;    .wrap</span> <span class="token punctuation">{</span>        <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>        <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 300px auto 300px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">.left,    .right,    .middle</span> <span class="token punctuation">{</span>        <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">.left</span> <span class="token punctuation">{</span>        <span class="token property">background</span><span class="token punctuation">:</span> coral<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">.right</span> <span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> lightblue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">.middle</span> <span class="token punctuation">{</span>        <span class="token property">background</span><span class="token punctuation">:</span> #555<span class="token punctuation">;</span>    <span class="token punctuation">}</span>&lt;/style&gt;&lt;div class=<span class="token string">"wrap"</span>&gt;    &lt;div class=<span class="token string">"left"</span>&gt;左侧&lt;/div&gt;    &lt;div class=<span class="token string">"middle"</span>&gt;中间&lt;/div&gt;    &lt;div class=<span class="token string">"right"</span>&gt;右侧&lt;/div&gt;&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table></table> 标签用于展示行列数据，不适合用于布局。但是可以使用 display: table 来实现布局的效果]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="CSS" scheme="https://robertjeff2.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS之盒子模型与BFC</title>
    <link href="https://robertjeff2.github.io/posts/404ade06.html"/>
    <id>https://robertjeff2.github.io/posts/404ade06.html</id>
    <published>2021-10-20T09:13:21.000Z</published>
    <updated>2021-10-20T11:27:04.161Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h1><h2 id="一、盒子模型是什么？"><a href="#一、盒子模型是什么？" class="headerlink" title="一、盒子模型是什么？"></a>一、盒子模型是什么？</h2><p>就是用来装页面上的元素的矩形区域。CSS 中的盒子模型包括IE 盒子模型和标准的W3C 盒子模型。 </p><p><em>box-sizing(有3 个值哦)：border-box,padding-box,content-box.</em></p><p>一个盒子由四个部分组成：<code>content</code>、<code>padding</code>、<code>border</code>、<code>margin</code></p><p><img src="https://gitee.com/robertjeff/imagebed/raw/master/images/202110201716372.png" alt="标准盒子模型"></p><p><code>content</code>，即实际内容，显示文本和图像</p><p><code>boreder</code>，即边框，围绕元素内容的内边距的一条或多条线，由粗细、样式、颜色三部分组成</p><p><code>padding</code>，即内边距，清除内容周围的区域，内边距是透明的，取值不能为负，受盒子的<code>background</code>属性影响</p><p><code>margin</code>，即外边距，在元素外创建额外的空白，空白通常指不能放其他元素的区域</p><h2 id="二、IE盒子模型（怪异盒子模型）"><a href="#二、IE盒子模型（怪异盒子模型）" class="headerlink" title="二、IE盒子模型（怪异盒子模型）"></a>二、IE盒子模型（怪异盒子模型）</h2><p><img src="https://gitee.com/robertjeff/imagebed/raw/master/images/202110201721486.png" alt="怪异盒子模型"></p><p>从上图可以看到：</p><ul><li>盒子总宽度 = width + margin;</li><li>盒子总高度 = height + margin;</li></ul><p>也就是，<code>width/height</code> 包含了 <code>padding</code>和 <code>border</code>值</p><h2 id="三、标准盒子模型（W3C）"><a href="#三、标准盒子模型（W3C）" class="headerlink" title="三、标准盒子模型（W3C）"></a>三、标准盒子模型（W3C）</h2><p>标准盒子模型，是浏览器默认的盒子模型</p><p>下面看看标准盒子模型的模型图：</p><p><img src="https://gitee.com/robertjeff/imagebed/raw/master/images/202110201724109.png" alt="标准盒子模型"></p><p>从上图可以看到：</p><ul><li>盒子总宽度 = width + padding + border + margin;</li><li>盒子总高度 = height + padding + border + margin</li></ul><p>也就是，<code>width/height</code> 只是内容高度，不包含 <code>padding</code> 和 <code>border</code>值</p><p>浏览器默认为w3c标准模型</p><h2 id="四、Box-sizing"><a href="#四、Box-sizing" class="headerlink" title="四、Box-sizing"></a>四、Box-sizing</h2><p>CSS 中的 box-sizing 属性定义了引擎应该如何计算一个元素的总宽度和总高度.</p><p>语法：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">box-sizing</span><span class="token punctuation">:</span> content-box|border-box|<span class="token property">inherit</span><span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>content-box 默认值，元素的 width/height 不包含padding，border，与标准盒子模型表现一致</li><li>border-box 元素的 width/height 包含 padding，border，与怪异盒子模型表现一致</li><li>inherit 指定 box-sizing 属性的值，应该从父元素继承</li></ul><h2 id="五、区别："><a href="#五、区别：" class="headerlink" title="五、区别："></a>五、区别：</h2><p>从图中我们可以看出，这两种盒子模型最主要的区别就是width 的包含范围，在 标准的盒子模型中，width 指content 部分的宽度，在IE 盒子模型中，width 表示 <code>content+padding+border</code> 这三个部分的宽度，故这使得在计算整个盒子的宽度时存在着差 异：标准盒子模型的盒子宽度：<code>左右border+左右padding+width</code> IE 盒子模型的盒子宽度：width 在CSS3 中引入了<code>box-sizing</code> 属性，<code>box-sizing:content-box;</code> 表示的是w3c 标准盒子模型， <code>box-sizing:border-box</code>表示IE的盒子模型 最后，前面我们还提到了，<code>box-sizing:padding-box</code>,这个属性值的宽度包含了左右 <code>padding+width</code>。</p><h2 id="六、盒模型的边距重叠"><a href="#六、盒模型的边距重叠" class="headerlink" title="六、盒模型的边距重叠"></a>六、盒模型的边距重叠</h2><p>主要分三种重叠， 重叠规则：一大一小取最大,一正一负取和</p><ol><li>相邻元素之间的重叠</li><li>父子嵌套的重叠</li><li>空的块级元素</li></ol><h3 id="1-相邻元素之间"><a href="#1-相邻元素之间" class="headerlink" title="1.相邻元素之间"></a>1.相邻元素之间</h3><p><img src="https://gitee.com/robertjeff/imagebed/raw/master/images/202110201757979.gif" alt="相邻元素之间的重叠"></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">// css*</span> <span class="token punctuation">{</span>  <span class="token property">margin</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#d1</span> <span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span>20px<span class="token punctuation">;</span>  <span class="token property">margin-bottom</span><span class="token punctuation">:</span>20px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#d2</span> <span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span>10px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span><span class="token punctuation">}</span>// html&lt;div id=<span class="token string">"d1"</span>&gt;&lt;/div&gt;&lt;div id=<span class="token string">"d2"</span>&gt;&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-父子嵌套重叠"><a href="#2-父子嵌套重叠" class="headerlink" title="2.父子嵌套重叠"></a>2.父子嵌套重叠</h3><p><img src="https://gitee.com/robertjeff/imagebed/raw/master/images/202110201759718.gif" alt="父子重叠"></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">// css*</span> <span class="token punctuation">{</span>  <span class="token property">margin</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#outer</span> <span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span>300px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span>300px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span>20px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#inner</span> <span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span>50px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span>50px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span>10px<span class="token punctuation">;</span><span class="token punctuation">}</span>// html &lt;div id=<span class="token string">"outer"</span>&gt;  &lt;div id=<span class="token string">"inner"</span>&gt;  &lt;/div&gt;&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-空的块级元素"><a href="#3-空的块级元素" class="headerlink" title="3.空的块级元素"></a>3.空的块级元素</h3><p><img src="https://gitee.com/robertjeff/imagebed/raw/master/images/202110201759462.gif" alt="空的块级元素与相邻元素"></p><h1 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h1><h2 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h2><h3 id="什么是BFC"><a href="#什么是BFC" class="headerlink" title="什么是BFC"></a>什么是BFC</h3><blockquote><p>块格式化上下文（Block Formatting Context，BFC） 是Web页面的可视化CSS渲染的一部分，是布局过程中生成块级盒子的区域，也是浮动元素与其他元素的交互限定区域。</p></blockquote><p><strong>渲染规则：</strong></p><ul><li>内部的盒子会在垂直方向上一个接一个的放置</li><li>对于同一个BFC的俩个相邻的盒子的margin会发生重叠，与方向无关。</li><li>每个元素的左外边距与包含块的左边界相接触（从左到右），即使浮动元素也是如此</li><li>BFC的区域不会与float的元素区域重叠</li><li>计算BFC的高度时，浮动子元素也参与计算</li><li>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素，反之亦然</li></ul><p><code>BFC</code>目的是形成一个相对于外界完全独立的空间，让内部的子元素不会影响到外部的元素</p><h2 id="二、触发条件"><a href="#二、触发条件" class="headerlink" title="二、触发条件"></a>二、触发条件</h2><p>触发<code>BFC</code>的条件包含不限于：</p><ul><li>根元素，即HTML元素</li><li>浮动元素：float值为left、right</li><li>overflow值不为 visible，为 auto、scroll、hidden</li><li>display的值为inline-block、inltable-cell、table-caption、table、inline-table、flex、inline-flex、grid、inline-grid</li><li>position的值为absolute或fixed</li></ul><h2 id="三、应用场景"><a href="#三、应用场景" class="headerlink" title="三、应用场景"></a>三、应用场景</h2><h4 id="防止margin重叠（塌陷）"><a href="#防止margin重叠（塌陷）" class="headerlink" title="防止margin重叠（塌陷）"></a>防止margin重叠（塌陷）</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;style&gt;    p</span> <span class="token punctuation">{</span>        <span class="token property">color</span><span class="token punctuation">:</span> #f55<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> #fcc<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">line-height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>&lt;/style&gt;&lt;body&gt;    &lt;p&gt;Haha&lt;/p &gt;    &lt;p&gt;Hehe&lt;/p &gt;&lt;/body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>页面显示如下</p><p><img src="https://gitee.com/robertjeff/imagebed/raw/master/images/202110201828573.png" alt="demo效果"></p><p>两个<code>p</code>元素之间的距离为<code>100px</code>，发生了<code>margin</code>重叠（塌陷），以最大的为准，如果第一个P的<code>margin</code>为80的话，两个P之间的距离还是100，以最大的为准。</p><p>前面讲到，同一个<code>BFC</code>的俩个相邻的盒子的<code>margin</code>会发生重叠</p><p>可以在<code>p</code>外面包裹一层容器，并触发这个容器生成一个<code>BFC</code>，那么两个<code>p</code>就不属于同一个<code>BFC</code>，则不会出现<code>margin</code>重叠</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;style&gt;    .wrap</span> <span class="token punctuation">{</span>        <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>// 新的BFC    <span class="token punctuation">}</span>    <span class="token selector">p</span> <span class="token punctuation">{</span>        <span class="token property">color</span><span class="token punctuation">:</span> #f55<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> #fcc<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">line-height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>&lt;/style&gt;&lt;body&gt;    &lt;p&gt;Haha&lt;/p &gt;    &lt;div class=<span class="token string">"wrap"</span>&gt;        &lt;p&gt;Hehe&lt;/p &gt;    &lt;/div&gt;&lt;/body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时，<code>margin</code>便不会发生重叠：</p><p><img src="https://gitee.com/robertjeff/imagebed/raw/master/images/202110201829974.png" alt="防止margin重叠"></p><h4 id="清除内部浮动"><a href="#清除内部浮动" class="headerlink" title="清除内部浮动"></a>清除内部浮动</h4><p>例子代码如下：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;style&gt;    .par</span> <span class="token punctuation">{</span>        <span class="token property">border</span><span class="token punctuation">:</span> 5px solid #fcc<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token selector">.child</span> <span class="token punctuation">{</span>        <span class="token property">border</span><span class="token punctuation">:</span> 5px solid #f66<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token punctuation">}</span>&lt;/style&gt;&lt;body&gt;    &lt;div class=<span class="token string">"par"</span>&gt;        &lt;div class=<span class="token string">"child"</span>&gt;&lt;/div&gt;        &lt;div class=<span class="token string">"child"</span>&gt;&lt;/div&gt;    &lt;/div&gt;&lt;/body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>页面显示如图：</p><p><img src="https://gitee.com/robertjeff/imagebed/raw/master/images/202110201833693.png" alt="demo效果"></p><p>而<code>BFC</code>在计算高度时，浮动元素也会参与，所以我们可以触发<code>.par</code>元素产生BFC，则内部浮动元素计算高度时候也会计算</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.par</span> <span class="token punctuation">{</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>最终实现了清除浮动的效果：</p><p><img src="https://gitee.com/robertjeff/imagebed/raw/master/images/202110201837298.png" alt="清除浮动"></p><h4 id="自适应多栏布局"><a href="#自适应多栏布局" class="headerlink" title="自适应多栏布局"></a>自适应多栏布局</h4><p>例子代码：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">    <span class="token selector">body</span> <span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>        <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token selector">.aside</span> <span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>        <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> #f66<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token selector">.main</span> <span class="token punctuation">{</span>        <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> #fcc<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aside<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>页面显示如图所示：</p><p><img src="https://gitee.com/robertjeff/imagebed/raw/master/images/202110201840879.png" alt="demo效果"></p><p>前面讲到，每个元素的左外边距与包含块的左边界相接触</p><p>因此，虽然<code>.aslide</code>为浮动元素，但是<code>main</code>的左边依然会与包含块的左边相接触</p><p>而<code>BFC</code>的区域不会与浮动盒子重叠</p><p>所以我们可以通过触发<code>main</code>生成<code>BFC</code>，以此适应两栏布局</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.main</span> <span class="token punctuation">{</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这时候，新的<code>BFC</code>不会与浮动的<code>.aside</code>元素重叠。因此会根据包含块的宽度，和<code>.aside</code>的宽度，自动变窄</p><p>效果如下：</p><p><img src="https://gitee.com/robertjeff/imagebed/raw/master/images/202110201842130.png" alt="自适应多栏布局"></p><p><img src="https://gitee.com/robertjeff/imagebed/raw/master/images/202110201849460.webp" alt="BFC作用场景"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="CSS" scheme="https://robertjeff2.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中的this</title>
    <link href="https://robertjeff2.github.io/posts/a5ceba90.html"/>
    <id>https://robertjeff2.github.io/posts/a5ceba90.html</id>
    <published>2021-10-18T12:51:42.000Z</published>
    <updated>2021-10-18T15:18:37.313Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="问：如何判断this的指向？"><a href="#问：如何判断this的指向？" class="headerlink" title="问：如何判断this的指向？"></a>问：如何判断this的指向？</h3><ul><li>在全局环境中调用就指向 window。</li><li>作为对象的方法调用就指向该对象。</li><li>作为构造函数调用就指向这个新创建的对象。</li><li>可以使用 apply,call,bind 改变 this 指向。</li><li>箭头函数中的 this 与定义时所处的上下文绑定，且不能被改变，   箭头函数 this 指向取决于它外层找到的离它最近的第一个非箭头函数的 this。</li></ul><h2 id="一、定义"><a href="#一、定义" class="headerlink" title="一、定义"></a>一、定义</h2><p>函数的 <code>this</code> 关键字在 <code>JavaScript</code> 中的表现略有不同，此外，在严格模式和非严格模式之间也会有一些差别</p><p><strong>无论是否在严格模式下，在全局执行环境中(任何函数体外部)<code>this</code>都指向全局对象</strong></p><p>在绝大多数情况下，函数的调用方式决定了 <code>this</code> 的值（运行时绑定）</p><p><code>this</code> 关键字是函数运行时自动生成的一个内部对象，只能在函数内部使用，总指向调用它的对象</p><p>example：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 当前调用栈是：baz</span>    <span class="token comment">// 因此，当前调用位置是全局作用域</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"baz"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;-- bar的调用位置</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 当前调用栈是：baz --&gt; bar</span>    <span class="token comment">// 因此，当前调用位置在baz中</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"bar"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;-- foo的调用位置</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 当前调用栈是：baz --&gt; bar --&gt; foo</span>    <span class="token comment">// 因此，当前调用位置在bar中</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"foo"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;-- baz的调用位置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>this</code> 在函数执行过程中，<code>this</code> 一旦被确定了，就不可以再更改</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span> <span class="token comment">// 修改this，运行后会报错</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="this在类中"><a href="#this在类中" class="headerlink" title="this在类中"></a>this在类中</h4><p><code>this</code>在类中的表现与在函数中类似，因为类本质上也是函数。</p><p>在类的构造函数中，<code>this</code> 是一个常规对象。类中所有非静态的方法都会被添加到 <code>this</code> 的原型中：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> proto <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>proto<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token function">second</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">static</span> <span class="token function">third</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">new</span> <span class="token class-name">Example</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['constructor', 'first', 'second']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、具体情况分析"><a href="#二、具体情况分析" class="headerlink" title="二、具体情况分析"></a>二、具体情况分析</h2><h3 id="apply、call方法"><a href="#apply、call方法" class="headerlink" title="apply、call方法"></a>apply、call方法</h3><p>在非严格模式下使用<code>call</code>和<code>apply</code>时，如果用做this值不是对象，则会被尝试转换为对象。</p><p><code>null</code>和 <code>undefined</code>会被转换为全局对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">bar</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// [object Number]</span><span class="token function">bar</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object String]</span><span class="token function">bar</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object global]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="bind方法"><a href="#bind方法" class="headerlink" title="bind方法"></a>bind方法</h3><p>ECMAScript 5 引入了 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind"><code>Function.prototype.bind()</code></a>。调用 <code>f.bind(someObject)</code> 会创建一个与 <code>f</code> 具有相同函数体和作用域的函数，但是在这个新函数中，<code>this</code> 将永久地被绑定到了 <code>bind</code> 的第一个参数，无论这个函数是如何被调用的。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> g <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token string">"azerty"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// azerty</span><span class="token keyword">var</span> h <span class="token operator">=</span> <span class="token function">g</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token string">'yoo'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// bind只生效一次！</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// azerty</span><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token number">37</span><span class="token punctuation">,</span> f<span class="token operator">:</span>f<span class="token punctuation">,</span> g<span class="token operator">:</span>g<span class="token punctuation">,</span> h<span class="token operator">:</span>h<span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>a<span class="token punctuation">,</span> o<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> o<span class="token punctuation">.</span><span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> o<span class="token punctuation">.</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 37, 37, azerty, azerty</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>在箭头函数中，<code>this</code> 与封闭词法环境的 <code>this</code> 保持一致。在全局代码中，它将被设置为全局对象：</p><p><strong>注意：如果将 <code>this</code> 传递给 <code>call</code>、<code>bind</code>、或者 <code>apply</code> 来调用箭头函数，它将被忽略。不过你仍然可以为调用添加参数，不过第一个参数（<code>thisArg</code>）应该设置为 <code>null</code>。</strong></p><pre class="line-numbers language-none"><code class="language-none">// 创建一个含有bar方法的obj对象，// bar返回一个函数，// 这个函数返回this，// 这个返回的函数是以箭头函数创建的，// 所以它的this被永久绑定到了它外层函数的this。// bar的值可以在调用中设置，这反过来又设置了返回函数的值。var obj = {  bar: function() {    var x = (() =&gt; this);    return x;  }};// 作为obj对象的一个方法来调用bar，把它的this绑定到obj。// 将返回的函数的引用赋值给fn。var fn = obj.bar();// 直接调用fn而不设置this，// 通常(即不使用箭头函数的情况)默认为全局对象// 若在严格模式则为undefinedconsole.log(fn() === obj); // true// 但是注意，如果你只是引用obj的方法，// 而没有调用它var fn2 = obj.bar;// 那么调用箭头函数后，this指向window，因为它从 bar 继承了this。console.log(fn2()() == window); // true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的例子中，一个赋值给了 <code>obj.bar</code> 的函数（称为匿名函数 A），返回了另一个箭头函数（称为匿名函数 B）。因此，在 <code>A</code> 调用时，函数 B 的 <code>this</code> 被永久设置为 obj.bar（函数 A）的 <code>this</code>。当返回的函数（函数 B）被调用时，它 <code>this</code> 始终是最初设置的。在上面的代码示例中，函数 B 的 <code>this</code> 被设置为函数 A 的 <code>this</code>，即 obj，所以即使被调用的方式通常将其设置为 <code>undefined</code> 或全局对象（或者如前面示例中的其他全局执行环境中的方法），它的 <code>this</code> 也仍然是 <code>obj</code> 。</p><h3 id="作为对象的方法"><a href="#作为对象的方法" class="headerlink" title="作为对象的方法"></a>作为对象的方法</h3><p>当函数作为对象里的方法被调用时，<code>this</code> 被设置为调用该函数的对象。</p><p>下面的例子中，当 <code>o.f()</code> 被调用时，函数内的 <code>this</code> 将绑定到 <code>o</code> 对象。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>  prop<span class="token operator">:</span> <span class="token number">37</span><span class="token punctuation">,</span>  <span class="token function-variable function">f</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>prop<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 37</span><span class="token comment">//可以理解为 o.f().call(o)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="原型链中的this"><a href="#原型链中的this" class="headerlink" title="原型链中的this"></a>原型链中的this</h3><p>对于在对象原型链上某处定义的方法，同样的概念也适用。如果该方法存在于一个对象的原型链上，那么 <code>this</code> 指向的是调用这个方法的对象，就像该方法就在这个对象上一样。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function-variable function">f</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> p <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，对象 <code>p</code> 没有属于它自己的 <code>f</code> 属性，它的 <code>f</code> 属性继承自它的原型。虽然最终是在 <code>o</code> 中找到 <code>f</code> 属性的，这并没有关系；查找过程首先从 <code>p.f</code> 的引用开始，所以函数中的 <code>this</code> 指向 <code>p</code>。也就是说，因为 <code>f</code> 是作为 <code>p</code> 的方法调用的，所以它的 <code>this</code> 指向了 <code>p</code>。这是 JavaScript 的原型继承中的一个有趣的特性。</p><h3 id="构造函数中"><a href="#构造函数中" class="headerlink" title="构造函数中"></a>构造函数中</h3><p>当一个函数用作构造函数时（使用 <code>new</code>关键字），它的 <code>this</code> 被绑定到正在构造的新对象。</p><p><em>虽然构造函数返回的默认值是 <code>this</code> 所指的那个对象，但它仍可以手动返回其他的对象（如果返回值不是一个对象，则返回 <code>this</code> 对象）。</em></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* * 构造函数这样工作: * * function MyConstructor(){ *   // 函数实体写在这里 *   // 根据需要在this上创建属性，然后赋值给它们，比如： *   this.fum = "nom"; *   // 等等... * *   // 如果函数具有返回对象的return语句， *   // 则该对象将是 new 表达式的结果。 *   // 否则，表达式的结果是当前绑定到 this 的对象。 *   //（即通常看到的常见情况）。 * } */</span><span class="token keyword">function</span> <span class="token constant">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">37</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// logs 37</span><span class="token keyword">function</span> <span class="token constant">C2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">37</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token number">38</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span>o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// logs 38</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在刚刚的例子中（<code>C2</code>），因为在调用构造函数的过程中，手动的设置了返回对象，与 <code>this</code> 绑定的默认对象被丢弃了。（这基本上使得语句 “<code>this.a = 37;</code>” 成了 “僵尸” 代码，实际上并不是真正的 “僵尸”，这条语句执行了，但是对于外部没有任何影响，因此完全可以忽略它）。</p><h3 id="DOM事件处理函数"><a href="#DOM事件处理函数" class="headerlink" title="DOM事件处理函数"></a>DOM事件处理函数</h3><p>当函数被用作事件处理函数时，它的 <code>this</code> 指向触发事件的元素（一些浏览器在使用非 <code>addEventListener</code> 的函数动态地添加监听函数时不遵守这个约定）。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="JS" scheme="https://robertjeff2.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>elementplus踩坑</title>
    <link href="https://robertjeff2.github.io/posts/753e8c51.html"/>
    <id>https://robertjeff2.github.io/posts/753e8c51.html</id>
    <published>2021-09-20T07:29:24.000Z</published>
    <updated>2021-10-18T12:52:24.936Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="坑一：elememt-plus-版本问题"><a href="#坑一：elememt-plus-版本问题" class="headerlink" title="坑一：elememt-plus 版本问题"></a>坑一：elememt-plus 版本问题</h3><p>在引入element-plus插件时的坑</p><p>视频版本是1.0.2beta64</p><p>此时通过npm安装的最新版本为1.1.0beta12</p><p>然而组件库在1.1.0版本做了一次breaking changes</p><p>修改了引入的方式 通过查阅文档后修复</p><p><a href="https://github.com/element-plus/element-plus/discussions/3020">Breaking changes made in 1.1.0-beta.1 · Discussion #3020 · element-plus/element-plus (github.com)</a></p><h3 id="坑二-还是element-plus问题"><a href="#坑二-还是element-plus问题" class="headerlink" title="坑二 还是element-plus问题"></a>坑二 还是element-plus问题</h3><p>没安装之前一切正常  安装好element-plus后  npm run serve 直接报错</p><pre class="line-numbers language-PowerShell" data-language="PowerShell"><code class="language-PowerShell">vue项目引入ElementUI-plus运行npm run serve后出现报错，网页内容无法显示：“export ‘createElementBlock‘ (imported as ‘_createElementBlock‘) was not found in ‘vue‘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>进度98%  大概跟导包方式有关系</p><p>解决方案：升级vue版本<br> 升级vue 到最新版本 执行 npm install <a href="mailto:vue@3.2.4">vue@3.2.4</a> –force</p><p>升级后报错消失 网页正常显示</p><p>这个element-plus 更新太快了 让我看一个月前的课程看起来像是一年前的一样hhhh</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="vue3" scheme="https://robertjeff2.github.io/tags/vue3/"/>
    
  </entry>
  
</feed>
