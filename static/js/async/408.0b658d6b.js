"use strict";(self.webpackChunkjeff_blog=self.webpackChunkjeff_blog||[]).push([["408"],{9694:function(e,n,r){r.r(n),r.d(n,{default:()=>d});var s=r(5893),c=r(65);function t(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",h3:"h3",p:"p",ul:"ul",li:"li"},(0,c.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"react-基础",children:["React 基础",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#react-基础",children:"#"})]}),"\n",(0,s.jsxs)(n.h2,{id:"基础",children:["基础",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#基础",children:"#"})]}),"\n",(0,s.jsxs)(n.h3,{id:"jsx-语法",children:["jsx 语法",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#jsx-语法",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"必须存在根元素 用（）包裹"}),"\n",(0,s.jsx)(n.p,{children:"不能插入 Object"}),"\n",(0,s.jsx)(n.p,{children:"变量使用{}"}),"\n",(0,s.jsx)(n.p,{children:"class 在 jsx 中使用 className 防止 class 关键字冲突"}),"\n",(0,s.jsx)(n.p,{children:"style 使用 style={{color:'red',fontSize:'12px'}} 把样式写成对象方式,不支持-连接"}),"\n",(0,s.jsxs)(n.h3,{id:"react-组件",children:["react 组件",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#react-组件",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"数据构造 constructor this.state={}"}),"\n",(0,s.jsx)(n.p,{children:"绑定方法 method=method.bind(this)"}),"\n",(0,s.jsx)(n.p,{children:"分为函数组件和类组件"}),"\n",(0,s.jsx)(n.p,{children:"类组件 class App extends React.component {}"}),"\n",(0,s.jsx)(n.p,{children:"事件绑定：方法小驼峰命名，通过{}传入方法"}),"\n",(0,s.jsx)(n.p,{children:"更新数据： this.setState({变量名:变量值})"}),"\n",(0,s.jsx)(n.p,{children:"setState 可能是同步也可能是异步的"}),"\n",(0,s.jsx)(n.p,{children:"组件间数据传递 props 在组件中 使用 this.props.xx 读取"}),"\n",(0,s.jsx)(n.p,{children:'传值: stuInfo={xxx} content="asdd" num={112}'}),"\n",(0,s.jsx)(n.p,{children:"props.children 获取<button>新建<button />的内容"}),"\n",(0,s.jsx)(n.p,{children:"使用 default 设置 props 的默认值"}),"\n",(0,s.jsx)(n.p,{children:"Hello.defalutProps={}"}),"\n",(0,s.jsx)(n.p,{children:"react 的状态提升 相当于父组件给子组件传递一个方法,在这个方法中改变父组件的值,相当于 vue 中的 emit"}),"\n",(0,s.jsx)(n.p,{children:"早期类组件才能设置状态(现在有 hooks)"}),"\n",(0,s.jsx)(n.p,{children:"受控组件"}),"\n",(0,s.jsx)(n.p,{children:"原生: 获取 DOM 组件 拿到 value 值"}),"\n",(0,s.jsx)(n.p,{children:"react value 绑定到 state onChange 绑定输入方法"}),"\n",(0,s.jsx)(n.p,{children:"表单控件完全受控于 state"}),"\n",(0,s.jsx)(n.p,{children:"非受控组件:不绑定在 state"}),"\n",(0,s.jsx)(n.p,{children:"在 react 中使用 React.createRef() //创建一个 ref 绑定到组件上,可以通过 ref 获取到组件"}),"\n",(0,s.jsx)(n.p,{children:"表单数据用 ref 去 DOM 节点获取"}),"\n",(0,s.jsx)(n.p,{children:"生命周期"}),"\n",(0,s.jsx)(n.p,{children:"诞生到销毁经历了一系列过程就叫做生命周期"}),"\n",(0,s.jsx)(n.p,{children:"render componentDidMount 调用接口"}),"\n",(0,s.jsx)(n.p,{children:"componentDidupdate"}),"\n",(0,s.jsx)(n.p,{children:"componentDidUnmount 销毁计时器"}),"\n",(0,s.jsxs)(n.h3,{id:"hook",children:["hook",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#hook",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"常用的有 useState useEffect"}),"\n",(0,s.jsx)(n.p,{children:"在没有编写 state 的情况下使用 state"}),"\n",(0,s.jsx)(n.p,{children:"useEffect"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"纯函数:一个确切的参数在函数中运行后一定能得到一个确切的值"}),"\n",(0,s.jsx)(n.li,{children:"如果一个函数存在副作用 则称该函数不是一个纯函数,副作用的结果就是不可控不可预期"}),"\n",(0,s.jsx)(n.li,{children:"例子:发送请求,监听注册,取消注册,以前是使用生命周期勾子,现在使用 uesEffect"}),"\n",(0,s.jsx)(n.li,{children:"是 React 中的一个 Hook，用于在函数组件中执行副作用操作。副作用操作包括数据获取、订阅、手动更改 DOM，以及在组件生命周期的特定阶段执行代码。"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"使用场景"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"数据获取 ：在组件挂载时获取数据。"}),"\n",(0,s.jsx)(n.li,{children:"订阅 ：在组件挂载时订阅事件，并在卸载时取消订阅。"}),"\n",(0,s.jsx)(n.li,{children:"手动 DOM 操作 ：在组件更新时手动操作 DOM。"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"useEffect 是 React 函数组件中处理副作用的主要工具，类似于类组件中的生命周期方法 componentDidMount 、 componentDidUpdate 和 componentWillUnmount 。"}),"\n",(0,s.jsx)(n.p,{children:"// 可选的清理函数"}),"\n",(0,s.jsx)(n.p,{children:"return()=>{"}),"\n",(0,s.jsx)(n.p,{children:"// 清理逻辑"}),"\n",(0,s.jsx)(n.p,{children:"console.log('Cleaning up...');"}),"\n",(0,s.jsx)(n.p,{children:"}; 在下一次执行 effect 函数之前执行"}),"\n",(0,s.jsx)(n.p,{children:"依赖数组:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"无依赖数组 ：如果不提供依赖数组，effect 函数将在每次组件渲染后执行。"}),"\n",(0,s.jsx)(n.li,{children:"空依赖数组 ：如果提供一个空数组，effect 函数只会在组件挂载和卸载时执行一次。"}),"\n",(0,s.jsx)(n.li,{children:"依赖数组 ：如果提供了依赖数组，effect 函数将在组件挂载、卸载以及依赖项发生变化时执行。"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"自定义 hook"}),"\n",(0,s.jsx)(n.p,{children:"用 use 开头 并在内部调用原生 hooks"}),"\n",(0,s.jsxs)(n.h3,{id:"react-router",children:["react-router",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#react-router",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"包裹根组件 BrowserRouter HashRouter 分别启动哈希模式和 history 模式"}),"\n",(0,s.jsx)(n.p,{children:"Router 主要是提供一个上下文环境"}),"\n",(0,s.jsx)(n.p,{children:"Route 在里面书写对应的路由 path 路由 element 匹配的组件"}),"\n",(0,s.jsx)(n.p,{children:"Navigate 导航到某个组件 调用后返回一个函数"}),"\n",(0,s.jsx)(n.p,{children:"useLocation()拿到跳转给的参数 location.state"}),"\n",(0,s.jsx)(n.p,{children:"NavLink a 标签"}),"\n",(0,s.jsx)(n.p,{children:"useParams 获取动态参数"}),"\n",(0,s.jsx)(n.p,{children:"useRouter 类似 vue 配置路由"}),"\n",(0,s.jsx)(n.p,{children:"Outlet 父组件里面嵌套子路由使用"}),"\n",(0,s.jsx)(n.p,{children:"在 useRoutes 配置 children 属性"}),"\n",(0,s.jsxs)(n.h3,{id:"redux-状态管理",children:["redux 状态管理",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#redux-状态管理",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"组件与组件之间统一的共享状态抽离到 redux 管理"}),"\n",(0,s.jsx)(n.p,{children:"props.store.getStore 获取仓库数据"}),"\n",(0,s.jsx)(n.p,{children:"redux 直接绑定到 app 组件"})]})}function h(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(t,{...e})}):t(e)}let d=h;h.__RSPRESS_PAGE_META={},h.__RSPRESS_PAGE_META["notes%2Freact%2Freact.md"]={toc:[{text:"基础",id:"基础",depth:2},{text:"jsx 语法",id:"jsx-语法",depth:3},{text:"react 组件",id:"react-组件",depth:3},{text:"hook",id:"hook",depth:3},{text:"react-router",id:"react-router",depth:3},{text:"redux 状态管理",id:"redux-状态管理",depth:3}],title:"React 基础",headingTitle:"React 基础",frontmatter:{}}}}]);