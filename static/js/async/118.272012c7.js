"use strict";(self.webpackChunkjeff_blog=self.webpackChunkjeff_blog||[]).push([["118"],{8594:function(e,n,r){r.r(n),r.d(n,{default:()=>h});var s=r(5893),i=r(65);function a(e){let n=Object.assign({h1:"h1",a:"a",h4:"h4",p:"p",ul:"ul",li:"li",ol:"ol",pre:"pre",code:"code"},(0,i.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"39-面试",children:["3.9 面试",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#39-面试",children:"#"})]}),"\n",(0,s.jsxs)(n.h4,{id:"echarts-性能调优举例说明",children:["Echarts 性能调优,举例说明",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#echarts-性能调优举例说明",children:"#"})]}),"\n",(0,s.jsxs)(n.h4,{id:"首屏加载速度",children:["首屏加载速度",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#首屏加载速度",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"按需引入 ECharts\n懒加载图表组件\n预加载关键资源\n数据分片加载:先加载核心数据,在加载完整数据"}),"\n",(0,s.jsxs)(n.h4,{id:"3权限系统后端菜单怎么转前端路由-前端写死-和动态加载",children:["3.权限系统:后端菜单怎么转前端路由: 前端写死 和动态加载",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3权限系统后端菜单怎么转前端路由-前端写死-和动态加载",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"组件懒加载 ：使用 () => import() 语法实现组件懒加载\n动态路由 ：通过 router.addRoute 动态添加路由\n路径处理 ：确保前后端路径格式一致\n权限控制 ：在路由守卫中完成菜单获取和路由添加\n这种方案可以实现前后端权限的统一管理，后端只需要维护菜单结构，前端负责动态生成路由和菜单"}),"\n",(0,s.jsxs)(n.h4,{id:"4浏览器事件循环",children:["4.浏览器事件循环",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4浏览器事件循环",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"为什么需要事件循环,\n同步代码 > 微任务 > 渲染 > 宏任务"}),"\n",(0,s.jsxs)(n.h4,{id:"5回流跟重绘",children:["5.回流跟重绘",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#5回流跟重绘",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"回流(Reflow) ：当元素的尺寸、位置或内容发生变化，导致浏览器需要重新计算元素几何属性并重新构建渲染树的过程。\n重绘(Repaint) ：当元素的外观样式改变（如颜色、背景色等），但不影响布局时，浏览器只需要重新绘制受影响区域的过程。"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"回流代价更高 ：回流必定引起重绘，但重绘不一定引起回流"}),"\n",(0,s.jsx)(n.li,{children:"现代浏览器优化 ：浏览器会批量处理回流操作（队列机制）"}),"\n",(0,s.jsx)(n.li,{children:"CSS 属性影响 ：不同 CSS 属性触发的渲染阶段不同"}),"\n",(0,s.jsx)(n.li,{children:"最佳实践 ："}),"\n",(0,s.jsx)(n.li,{children:"避免频繁读取会触发回流的属性（如 offsetWidth）"}),"\n",(0,s.jsx)(n.li,{children:"使用 requestAnimationFrame 安排动画"}),"\n",(0,s.jsx)(n.li,{children:"对复杂动画使用 position: absolute/fixed 脱离文档流"}),"\n",(0,s.jsx)(n.li,{children:"使用 CSS3 硬件加速（transform/opacity 等）"}),"\n"]}),"\n",(0,s.jsxs)(n.h4,{id:"6一次性在页面上加载很多元素",children:["6.一次性在页面上加载很多元素",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#6一次性在页面上加载很多元素",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"虚拟滚动技术 (核心方案)\n分块加载 (时间切片)\n使用文档片段批量插入"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"优先使用虚拟滚动 ：适合列表/表格等线性布局"}),"\n",(0,s.jsx)(n.li,{children:"复杂布局使用分块加载 ：配合 requestIdleCallback"}),"\n",(0,s.jsx)(n.li,{children:"减少 DOM 复杂度 ：简化节点结构和样式"}),"\n",(0,s.jsx)(n.li,{children:"避免同步布局抖动 ：不要在循环中读取布局属性"}),"\n",(0,s.jsx)(n.li,{children:"使用 CSS containment ：限制重绘范围"}),"\n",(0,s.jsx)(n.li,{children:"大数据处理在 Worker 中完成 ：保持主线程流畅\n这些方法可以单独或组合使用，根据具体场景选择最适合的方案。虚拟滚动是处理超长列表最有效的解决方案。"}),"\n"]}),"\n",(0,s.jsxs)(n.h4,{id:"7js-判断是一个对象是空对象",children:["7.JS 判断是一个对象是空对象",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#7js-判断是一个对象是空对象",children:"#"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-JavaScript",children:"functionisEmptyObject(obj) {\n  // 处理null和undefined\n  if(obj==null)returnfalse;\n  // 处理非对象类型\n  if(typeof obj!=='object')returnfalse;\n  // 处理数组\n  if(Array.isArray(obj))returnobj.length===0;\n  // 处理普通对象\n  returnObject.keys(obj).length===0;\n}\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"8一个数组需要依次用里面的-id-去调用接口获得用户信息返回一个用户信息数组编写代码",children:["8.一个数组,需要依次用里面的 id 去调用接口获得用户信息,返回一个用户信息数组,编写代码",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#8一个数组需要依次用里面的-id-去调用接口获得用户信息返回一个用户信息数组编写代码",children:"#"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-JavaScript",children:"async function fetchUsersByIds(userIds) {\n  const userInfos = [];\n  for (const id of userIds) {\n    try {\n      const response = await fetch(`/api/users/${id}`);\n      const userData = await response.json();\n      userInfos.push(userData);\n    } catch (error) {\n      console.error(`获取用户 ${id} 信息失败:`, error);\n      userInfos.push(null); // 失败时放入null保持数组顺序\n    }\n  }\n  return userInfos;\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-JavaScript",children:"async function fetchUsersByIds(userIds, maxConcurrent = 3) {\n  const userInfos = Array(userIds.length).fill(null);\n  let index = 0;\n  async function fetchBatch() {\n    while (index < userIds.length) {\n      const currentIndex = index++;\n      const id = userIds[currentIndex];\n      try {\n        const response = await fetch(`/api/users/${id}`);\n        const userData = await response.json();\n        userInfos[currentIndex] = userData;\n      } catch (error) {\n        console.error(`获取用户 ${id} 信息失败:`, error);\n      }\n    }\n  }\n  // 创建并发请求\n  const promises = Array(Math.min(maxConcurrent, userIds.length))\n    .fill()\n    .map(fetchBatch);\n\n  await Promise.all(promises);\n  return userInfos;\n}\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"9foreach-跳出循环",children:["9.forEach 跳出循环",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#9foreach-跳出循环",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"使用 for...of 代替\n使用异常跳出"}),"\n",(0,s.jsxs)(n.h4,{id:"10精度问题",children:["10.精度问题",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#10精度问题",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"toFixed(2) 四舍五入不准确\n第三方数据库\nBigInt\n原理"}),"\n",(0,s.jsxs)(n.h4,{id:"11diff-算法",children:["11.diff 算法",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#11diff-算法",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"vue2/vue3"}),"\n",(0,s.jsx)(n.p,{children:"12.uniapp 跟原生小程序的区别"})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}let h=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["experience%2Finterview%2Ffirst.md"]={toc:[{text:"Echarts 性能调优,举例说明",id:"echarts-性能调优举例说明",depth:4},{text:"首屏加载速度",id:"首屏加载速度",depth:4},{text:"3.权限系统:后端菜单怎么转前端路由: 前端写死 和动态加载",id:"3权限系统后端菜单怎么转前端路由-前端写死-和动态加载",depth:4},{text:"4.浏览器事件循环",id:"4浏览器事件循环",depth:4},{text:"5.回流跟重绘",id:"5回流跟重绘",depth:4},{text:"6.一次性在页面上加载很多元素",id:"6一次性在页面上加载很多元素",depth:4},{text:"7.JS 判断是一个对象是空对象",id:"7js-判断是一个对象是空对象",depth:4},{text:"8.一个数组,需要依次用里面的 id 去调用接口获得用户信息,返回一个用户信息数组,编写代码",id:"8一个数组需要依次用里面的-id-去调用接口获得用户信息返回一个用户信息数组编写代码",depth:4},{text:"9.forEach 跳出循环",id:"9foreach-跳出循环",depth:4},{text:"10.精度问题",id:"10精度问题",depth:4},{text:"11.diff 算法",id:"11diff-算法",depth:4}],title:"3.9 面试",headingTitle:"3.9 面试",frontmatter:{}}}}]);